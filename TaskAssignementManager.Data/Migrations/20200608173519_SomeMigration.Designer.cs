// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskAssignementManager.Data;

namespace TaskAssignementManager.Data.Migrations
{
    [DbContext(typeof(TasksDbContext))]
    [Migration("20200608173519_SomeMigration")]
    partial class SomeMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskAssignementManager.Domain.Tasks.TaskGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02be9a27-4a0b-4fa0-aa56-8a8ad68b3b4f"),
                            Name = "SeedTaskGroup"
                        });
                });

            modelBuilder.Entity("TaskAssignementManager.Domain.Tasks.UserTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("UserTasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffaeed64-ddcf-46f7-b9ed-9b65ab1c9e6c"),
                            Deadline = new DateTime(2020, 6, 18, 19, 35, 18, 544, DateTimeKind.Local).AddTicks(7101),
                            GroupId = new Guid("02be9a27-4a0b-4fa0-aa56-8a8ad68b3b4f"),
                            Name = "SeedTask1_Unassigned",
                            Status = 0,
                            UsersId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("c2de67e9-a95c-48ba-807c-42899ac06bce"),
                            Deadline = new DateTime(2020, 6, 13, 19, 35, 18, 551, DateTimeKind.Local).AddTicks(2306),
                            GroupId = new Guid("02be9a27-4a0b-4fa0-aa56-8a8ad68b3b4f"),
                            Name = "SeedTask2_Unassigned",
                            Status = 1,
                            UsersId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("880e13ea-3e6e-4df9-a379-d7df481ee545"),
                            Deadline = new DateTime(2020, 6, 16, 19, 35, 18, 551, DateTimeKind.Local).AddTicks(2466),
                            GroupId = new Guid("02be9a27-4a0b-4fa0-aa56-8a8ad68b3b4f"),
                            Name = "Completed_SeedTask3_AssignedToUnexistingUser",
                            Status = 2,
                            UsersId = new Guid("b4bf4e52-e77a-4f22-9de6-6af24fa3fae1")
                        });
                });

            modelBuilder.Entity("TaskAssignementManager.Domain.Tasks.UserTask", b =>
                {
                    b.HasOne("TaskAssignementManager.Domain.Tasks.TaskGroup", "Group")
                        .WithMany("UserTasks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
